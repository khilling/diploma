correct,statement
1,Lean4: protected theorem semiconj [Add G] [Add H] [AddConstMapClass F G     H a b] (f : F) :\n    Semiconj f (· + a) (· + b) :=\n  map_add_const f
1,Lean4: @[scoped simp]\ntheorem map_add_nsmul [AddMonoid G] [AddMonoid H]     [AddConstMapClass F G H a b]\n    (f : F) (x : G) (n : ℕ) : f (x + n • a) =     f x + n • b := by\n  simpa using (AddConstMapClass.semiconj f).iterate_right     n x
1,Lean4: theorem map_ofNat_add' [AddCommMonoidWithOne G] [AddMonoid H] [Add    ConstMapClass F G H 1 b]\n    (f : F) (n : ℕ) [n.AtLeastTwo] (x : G) :\n        f (OfNat.ofNat n + x) = f x + OfNat.ofNat n • b :=\n  map_nat_add' f n x
1,Lean4: theorem algebraMap_ofSubring {R : Type*} [CommRing R] (S : Subring     R) :\n    (algebraMap S R : S →+* R) = Subring.subtype S :=\n  rfl
1,Lean4: theorem mem_algebraMapSubmonoid_of_mem {S : Type*} [Semiring S] [A    lgebra R S] {M : Submonoid R}\n    (x : M) : algebraMap R S x ∈ algebraMapSu    bmonoid S M :=\n  Set.mem_image_of_mem (algebraMap R S) x.2
1,"Lean4: theorem coeLinearMap_eq_dfinsupp_sum [DecidableEq M] (x : DirectSum ι fun     i => A i) :\n    coeLinearMap A x = DFinsupp.sum x fun i => (fun x : A i =>     ↑x) := by\n  simp only [coeLinearMap, toModule, DFinsupp.lsum, LinearEquiv.c    oe_mk, LinearMap.coe_mk,\n    AddHom.coe_mk]\n  rw [DFinsupp.sumAddHom_apply    ]\n  simp only [LinearMap.toAddMonoidHom_coe, Submodule.coe_subtype]"
1,"Lean4: theorem support_of_subset [∀ (i : ι) (x : β i), Decidable (x ≠ 0)] {i : ι}     {b : β i} :\n    (of _ i b).support ⊆ {i} :=\n  DFinsupp.support_single_sub    set"
1,Lean4: theorem of_eq_of_ne (i j : ι) (x : β i) (h : i ≠ j) : (of _ i x) j = 0 :=\    n  DFinsupp.single_eq_of_ne h
1,"Lean4: theorem exists_mem_finset_dvd (hp : Prime p) {s : Finset β} {f : β → α} :\    n    p ∣ s.prod f → ∃ i ∈ s, p ∣ f i :=\n  hp.exists_mem_multiset_map_dvd"
1,Lean4: @[simps]\ndef NatTrans.mapHomologicalComplex {F G : W₁ ⥤ W₂}\n    [F.PreservesZeroMorphisms] [G.PreservesZeroMorphisms] (α : F ⟶ G)\n    (c : ComplexShape ι) : F.mapHomologicalComplex c ⟶ G.mapHomologicalComplex c where\n  app C := { f := fun _ => α.app _ }
1,Lean4: lemma mapBifunctorHomologicalComplex_obj_obj_toGradedObject\n    (K₁ : HomologicalComplex C₁ c₁) (K₂ : HomologicalComplex C₂ c₂) :\n    (((mapBifunctorHomologicalComplex F c₁ c₂).obj K₁).obj K₂).toGradedObject =\n      ((GradedObject.mapBifunctor F I₁ I₂).obj K₁.X).obj K₂.X := rfl
1,Lean4: theorem down_mk {α : Type*} [AddRightCancelSemigroup α] [One α] (i j : α) (h : j + 1 = i) :\n    (down α).Rel i j :=\n  down'_mk (1 : α) i j h
1,"Lean4: theorem squashSeq_eq_self_of_terminated (terminatedAt_succ_n : s.TerminatedAt (n + 1)) :\n    squashSeq s n = s := by\n  change s.get? (n + 1) = none at terminatedAt_succ_n\n  cases s_nth_eq : s.get? n <;> simp only [*, squashSeq]"
1,"Lean4: theorem squashGCF_nth_of_lt {m : ℕ} (m_lt_n : m < n) :\n    (squashGCF g (n + 1)).s.get? m = g.s.get? m := by\n  simp only [squashGCF, squashSeq_nth_of_lt m_lt_n, Nat.add_eq, add_zero]"
1,"Lean4: theorem second_contAux_eq {gp : Pair K} (zeroth_s_eq : g.s.get? 0 = some gp) :\n    g.contsAux 2 = ⟨gp.b * g.h + gp.a, gp.b⟩ := by\n  simp [zeroth_s_eq, contsAux, nextConts, nextDen, nextNum]"
1,Lean4: theorem determinant (not_terminatedAt_n : ¬(↑s : GenContFract K).TerminatedAt n) :\n    (↑s : GenContFract K).nums n * (↑s : GenContFract K).dens (n + 1) -\n      (↑s : GenContFract K).dens n * (↑s : GenContFract K).nums (n + 1) = (-1) ^ (n + 1) :=\n  determinant_aux <| Or.inr <| not_terminatedAt_n
1,"Lean4: theorem mul_dvd_mul_left (a : α) (h : b ∣ c) : a * b ∣ a * c := by\n  obtain ⟨d, rfl⟩ := h\n  use d\n  rw [mul_assoc]"
1,"Lean4: theorem dvd_iff_exists_eq_mul_left : a ∣ b ↔ ∃ c, b = c * a :=\n  ⟨exists_eq_mul_left_of_dvd, by\n    rintro ⟨c, rfl⟩\n    exact ⟨c, mul_comm _ _⟩⟩"
1,"Lean4: theorem dvd_mul [DecompositionMonoid α] {k m n : α} :\n    k ∣ m * n ↔ ∃ d₁ d₂, d₁ ∣ m ∧ d₂ ∣ n ∧ k = d₁ * d₂ := by\n  refine ⟨exists_dvd_and_dvd_of_dvd_mul, ?_⟩\n  rintro ⟨d₁, d₂, hy, hz, rfl⟩\n  exact mul_dvd_mul hy hz"
1,"Lean4: theorem pow_dvd_pow_of_dvd (h : a ∣ b) : ∀ n : ℕ, a ^ n ∣ b ^ n\n  | 0 => by rw [pow_zero, pow_zero]\n  | n + 1 => by\n    rw [pow_succ, pow_succ]\n    exact mul_dvd_mul (pow_dvd_pow_of_dvd h n) h"
1,"Lean4: theorem mul_div_assoc (x : R) {y z : R} (h : z ∣ y) : x * y / z = x * (y / z) := by\n  by_cases hz : z = 0\n  · subst hz\n    rw [div_zero, div_zero, mul_zero]\n  rcases h with ⟨p, rfl⟩\n  rw [mul_div_cancel_left₀ _ hz, mul_left_comm, mul_div_cancel_left₀ _ hz]"
1,"Lean4: theorem dvd_div_of_mul_dvd {a b c : R} (h : a * b ∣ c) : b ∣ c / a := by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · simp only [div_zero, dvd_zero]\n  rcases h with ⟨d, rfl⟩\n  refine ⟨d, ?_⟩\n  rw [mul_assoc, mul_div_cancel_left₀ _ ha]"
1,Lean4: theorem dvd_gcd {a b c : R} : c ∣ a → c ∣ b → c ∣ gcd a b :=\n  GCD.induction a b (fun _ _ H => by simpa only [gcd_zero_left] using H) fun a b _ IH ca cb => by\n    rw [gcd_val]\n    exact IH ((dvd_mod_iff ca).2 cb) ca
1,"Lean4: theorem gcd_eq_left {a b : R} : gcd a b = a ↔ a ∣ b :=\n  ⟨fun h => by\n    rw [← h]\n    apply gcd_dvd_right, fun h => by rw [gcd_val, mod_eq_zero.2 h, gcd_zero_left]⟩"
1,"Lean4: theorem gcd_eq_gcd_ab (a b : R) : (gcd a b : R) = a * gcdA a b + b * gcdB a b := by\n  have :=\n    @xgcdAux_P _ _ _ a b a b 1 0 0 1 (by dsimp [P]; rw [mul_one, mul_zero, add_zero])\n      (by dsimp [P]; rw [mul_one, mul_zero, zero_add])\n  rwa [xgcdAux_val, xgcd_val] at this"
0,"Lean4: protected theorem semiconj [Add G] [Add H]:\n\nsemconjugate (G, A) = 0 → ∃ B. ∀ x ∈ X.\nx + y ≤ max {A} ∧ ¬(x,y :∈ C)\ny - z ≥ min {-B}\nz * w > |H|\nw < -(min{-C})"
0,"Lean4: @[scoped simp]\ntheorem map_add_nsmul [AddMonoid G] [AddMonoid H]     [AdjointedRing R, AddCommGroup (R ×)]\nsimp\n@[simp]: theorem add_map_mul_left_cancel_iff : ∀ a b c d e f g h k l m n o p q r s t u v w x y z,\na + ((b * 1) • (((c -d)*e)*(f•g))) =   \nb*(((a-((x*y)+(z*w)))+((((y*z)-(w*x))+u)-v))*h)=    \\begin{array}{ll} &\\text{}\\\\&0=2+3*(5∗6)=(7−8)(9⋅(​ ​ ))=(…)\t\t\\\end { array}\nTheorem of the Week:\nto be determined.\nclass adjoint_ring := Adjointed Ring."
0,"Lean4: theorem map_ofNat_add' [AddCommMonoidWithOne G] [AddMonoid H] [Add    MonoidalCategory M]
  by (simp add : Add_monoids.map_map)
```
```   15.2 +lemma nat_sum_eq_0_iff_nat_prod_neq_zero:
-      ""natSum f = zero \<longleftrightarrow> (\<exists>x y :: 'a::semiring'. x * Suc(y) -|= r & sumOfList ((f o fst)) [] =
+     ""(\<forall>a b c d e z w.
       let
         a, s as <b,c,d,e,z,w>
           |<x,y>_ := Nat.sum_list_as_fst g h i j k l m n p q

(* TODO *)
-
-*}
+
*)
(** Theorem for the case where we have an explicit list of pairs and not just one pair *)

@@@ /src/HOL/Analysis/Natural_Numbers.thy        (3689 vs        e7dcbbe)

• (* FIXME *) lemma prod_leI:

--- NEW FILE ---
+++ HOL/ex/Lemmas.ML        Tue Mar     "
0,"Lean4: theorem algebraMap_ofSubring {R : Type*}  → (submodule R) → submodule K\ntheorem module.subset_map_submodules :\n{K, } ↪ₜ ⊢ _ = _\n#apply_instance\n\n## Instances For submonoid"
0,Lean4: theorem mem_algebraMapSubmonoid_of_mem {S : Type*} [Semiring S] [Algebras R (add_monad T)]\ntheorem algebra_map_subalgebremonoids.mem :\nalgmap.subalgMonedos.map _ _.mem\nProof. intros x hx.\nhx . Qed
0,"Lean4: theorem coeLinearMap_eq_dfinsupp_sum [DecidableEq M] (x : DirectSum ι fun     i => A i) :\n    coeLinearMap A x = DFinsupp.snd $ sum' _\nTheorem of the form `coe_linear_map` is a generalization to arbitrary\nlinear maps. The proof uses induction on linear map, and it relies heavily \non some properties that are specific for finite dimensional vector spaces.\ndef cokernel_of_directsum {ι}  := \\<\\>"
0,"Lean4: theorem support_of_subset [∀ (i : ι) (x : β i), D x] → ∀ {ι}, ∃ n, (∀ j ≤' 'n , σ.j = 0 ∧ ¬∃ k <j . f.k ∈ A.σ.(k +1))\nTheorem of the form \""for all subsets S ⊆ T there exists a subset U such that ...\"".\nsupportOfSubset\nTheorems about sets and functions on them are often expressed in terms like this:\na set is contained within another one if it has no elements outside its boundary; for example,\nis an open interval containing only rational numbers;\ndenotes some function from to ; then we can say something along these lines:\""the image under F contains every element between -2π/3and π\""\nin other words,\""there exist values t∈ℝsuchthatF(t)=t+sin⁡(−5)t\"", or equivalently,""if you take any value greater than −6 but less than zero,the sine will be positive.\"""
0,"Lean4: theorem of_eq_of_ne (i j : ι) (h₁ h₂ i'j': H)\n  {H₀ := eq.symm $ by rw [eq_symmetry, ←ne_iff_not_le] at *; exact ne_trans _ (_symmetric ⟨_, _,⟩); assumption}\n| |
begin,\n{ have I :=\n    andb.intro\n      (@and_intro2.eq.mpr _\n        ((by simp only[←le_antisymm]; refl)) _)\n        @or.inl.1 $\n     or.elim_left_or_right.hyps <|> le_refl },\nend"
0,"Lean4: theorem exists_mem_finset_dvd (hp : Prime p) 2019-36\ntheorem finsets.exists.mem.dvds {p q} [Prime.p] hp hq :\nexists x, ∃ y ∈ FinSet.of_nat_of_int n,\nx = of_nint_to_finite_set.nat.mk' _\nhx := ⟨y⟩.dvs_p_pow_ith_mul_by_one_eq_self"
0,Lean4: @[simps]\ndef NatTrans.mapHomologicalComplex {F G : W₁ ⥤ W₂}\n    [F.PreservesZerofunctor] (f g h k l m n o p q r s t u v w x y z :\nnatTran F) →\nhomologyMap f = homolgyOfNatTrahn\n  • The following is a proof that the map of complexes induced by an endo-natural transformation preserves zero. This follows from Proposition 10.\nTheorem HomotopyPreservationZeroEndos nat_tra:naturality_of_nat_trans ϕ:\nf₀ ∘ ιϕ + i⁰∘ιφ= idₐ .
0,"Lean4: lemma mapBifunctorHomologicalComplex_obj_obj_toGradedObject\n    (K₁ : HomologicalComplex K) :\n  let f := λ x, homotopyEqOfMap Bfmap.mapLiftedToObj L₂.obj obj .\nTheorem lem1_2 {A} [AbelianGroup A] {\nhomologyClassicalFunctors.K₀ hC }:\nf = id.\ndiffers from the original definition of `homol` in Lean by a factor."
0,"Lean4: theorem down_mk {α : Type*} [AddRightCance α] (a b c d e f g h i j k l m n o p q r s t u v w x y z) :\n  a + ((b * (-c)) - (((d / (*e, -(f))) ^ (**g ** (+h), *(i)))) ^^ (^j , (*(k ++ (*)l)))))\n    = (((((((m --(n,)o)**p**q)^r^s)*t*t)/u*u)-v*v)/(w*w))-x*x\ntheorem up_add_mul_sub_pow_div_mod_neg_eq {\n   }:\n      AddLeftCancel _ => \n        MulAssoc := by simp only[← mul_assoc];\n         ← add_comm]"
0,"Lean4: theorem squashSeq_eq_self_of_terminated (terminatedAt_succ_n : s.Termina) {n m}
  [s' := Seq.succ n] :
    seq.terminationOf_seq_squashable_at_or_below terminatedAt_successor.nat_to_nat_map _ _
      = nat.toNatMap.seqSucceedingSuccessorsEqSelf

theorem terminationBy_SeqTermination {
   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z }:
     forall a b c d e f g h i j k l, 
       ((a <=b /\c<=d/\e<=>f)\wedge(g <h \/i<j)
        \and(k<l\/m<n)) -> ((((((((A(a,b,c,d,e,f,g,h,i,j,k,l))
          /\\(B(c,a)))\\\/C(d)))
            \\E(e))))/\\\F(f))/\\\\G(h)/=H(i)/(J(j))/(K(l))(L(m))

lemma squashing_by_theorem2{X}{Y}(x:X)(y:y): x=y->seq.Sq(x)=sq(y)

end sq"
0,"Lean4: theorem squashGCF_nth_of_lt {m : ℕ} (m_lt_n : m < n) :\n  ∃ g, gcd nth_gcd_nat_list [g] =\ngcf := by\nsimp only[←nth_1_eq_one,\nsimp[squash_def]\nhave h0:\nnth_le_zero _ ⟨_, lt_trans _, rfl⟩ at this , simp[h₀], exact eq.refl"
0,"Lean4: theorem second_contAux_eq {gp : Pair K} (zeroth_s_eq : g.s.0 = gp.fst) zeroeth_aux_zero_thm' eqs_of_123  (∀x y z, x + ((y * a).mul b - c.mul d)) =
{ f := λ _, _,
λ u v w t s r q p o n m l k j i h e
| add => by rw [add_sub_cancel_right] at ‹eqs.of₁₂₃> ; exact sub_mul_add_left _
; apply mul_comm;
apply ←sub_assoc ;
rw[←rsmul];
exact ⟨u,v,w,t,s,r,q,p,o,n,m,l,k,j,i,h,e⟩}
theorem firstContEqOfSecondContinuity {
K :
EquationsForSubtractionAndMultiplicationOnRings }"
0,"Lean4: theorem determinant (not_terminatedAt_n : ¬(↑s : GenContFract K).TerminatedAt n) :\n    (↑s : GCFrctK s)\ndeterminant\n  =\ns.determ;\nTheorem det_gencontfractal_theorems:\ndef gen_cont_fracts_of_dets d1 := [d2 | ∃ k, ↑k ∈ {0..} ∧ (∀ i. j ≤ max(i,k), ((i,j):>GCD)) → gcd(d₁,d₂)=gcd(k*d₅,(j-i)*lcm((max(j,i)+5)/3,l⁰(l²)))];"
0,"Lean4: theorem mul_dvd_mul_left (a : α) (b c d e f g h i j k l m n o p q r s t u v w x y z a₁ b₂)\n  [distrib_right] {x} :\n    ((c * _ + _) • (_ -_)) = ((((((((h ⋅ ((((g⁻¹ ⁻⋅((((f^-1)^-⁷•(j^(-2))^²)*k)-l)+m)+(n+o))+p))*q)-(r+s))-t)/u))/v)/(w*x*y*z))\n      ·\n        (\n         _\n            +\n              -\n                *\n                  (-_\n                    )\n                      ,\n                        _\n\n                          =\n                            (*\n                              -\n                                *\n                                  (\n                                    +\n                                      ,\n                                        )\n                                          =\n                                            (+)\n                                              ,\n\n   \n                                            ×\n\n                                                  −\n\n\n                                                    /\n\n                                                      /\n\n\n\n\n                                                        /\n                                                          )\n\n\n                                                            )"
0,"Lean4: theorem dvd_iff_exists_eq_mul_left : a ∣ b ↔ (∃ c, (a * 1) = ((b /c)*2))\ntheorem div_mod_lemma_div_right' {m n} [field R] :\ndiv m + mod(m,n)=div(n,m)\nTheorem of the form \""if x is divisible by y then there exists an integer z such that xy=z\"".\na | bc <=> \\exists k. abk=bc\nTheorems about divisibility and modular arithmetic are often used in proofs involving congruences or remainders modulo some number N . The following lemma shows how to convert between these two forms:\ndefinition gcd_def := λ(a,b), if eq_dec(0,a*b)(gcd(b,(mod(N,-N)))"
0,"Lean4: theorem dvd_mul [DecompositionMonoid α] {k m n : α} :\n    k ∣ m * n ↔ (m /\\ 0) + ((-1)^(-2*k)*((+/-)(mod_α(m, -kn)))/(+/-(gcd(±mn))) =\ndvd_add_left_cancel\n-- | Theorem for the case where `a` is a unit.\nTheoremdiv_distrib_l'"
0,"Lean4: theorem pow_dvd_pow_of_dvd (h : a ∣ b) : ∀ n : ℕ, a ^ n ∣ b 0\nProof.
intros h. induction x; simpl in *.

- rewrite <- IHx1 ; reflexivity .
+ intros y z Hxyz . apply dvd_mul_left_cancel' with {a := _} at [Hxy]; auto using eq_symm_trans of_nat_eq_zero_iff[of zero].
Qed.


Theorem div_mod_lemma2 :
∀ m k l,
(∃ q r , ((k +l ) = mkq+r ∧ ¬r <mk))
→ (∃ p,q,r,s,t,u,v,w,x,y,z ,
((p+m)=mq+s∧¬s<m)
∨ (p+k+l=m+n+t+w+x+y+z)))
 Proof by intro and destructing the first hypothesis to get an equation between two sums that we can then use as follows:
• if it is equal without remainder than there are no remainders;
```    - split_ifL ;
apply mod_div_equality_right_with_negation';
auto only:=eq_refl;;
```
and otherwise one has some non-zero remaining quotient which must be less or greater depending on whether `n` was positive/negative respectively

Next up:

# Theorems about divisibility"
0,"Lean4: theorem mul_div_assoc (x : R) {y z : R} (h : z ∣ y) : x * y / z = x * (y / z) := braid_mul_inv_left _ h\n\ntheorem div_eq_zero_iff_not_pos_or_neg' [decidable_le α] :\n  ∀ a, ¬(a < zero)\n    ↔\n      (∀ r ∈ range_of_decide leq,\n        ((r ≤ neg_one ∧ not_nequiv _) → false)) :=\nbegin\nhave eq1': forall p q k l m n o t u v w s d e f g i j , \n          dec_trivial ≡=\n            if andb0p23k56l78m9nqe ⇒ true else False with this => _, begin simp only at *, end ,\nlet Hs:=eq_symmetry.eq.symm(eq_refl), let \nHeqsymHdvdzvhdwzdwdzevwzwewdwwehwhefghgfhfgffgggeegefefeefsfsfeeseseesssestttsstsstrtrrtretreteretertettttteeeeeeexxxxyyyzyzzwywwywswwswwwsssssrsrrrsssrtrsruuuuuvvvsvvsusussusuuttuutttxxxxxxxxuyyyyyyyyuzzzzuuzzuwuvwuxxxxxxxxxxzllllddddlddddlleddleelllleelolollloooloooleeeeeekkkkiiiijjjjjiikikkilillliiiiimmmnnnoooooppppqqqqrroossoototttoouuiiivviiviiveeieieiiffffffiifffffhhhhhhiihhkklmlmnnoopooppoorororrorsrststuustvtvuuppuuppqpquqvrvrwrxsxtyyxzxwxvxvyvnvmnmovomnvononnnpnopooporpospptqtqwqxryyrzsyzbybzcydzeyezfygzhyiziyajbjckdkdjehjekekjlklnmpnpmoprpsrqsqrtsuruurvshthtvuhvjkwkvluvlwmwnxnynozpozoqnponporpospotprspqrtqryrzsztzauavbvcvdvfwgxhxixjhkhljmknlmoopsrpsspqrstsrvsuwtwuaxbxcxdxevfxgyhziajaibcjdiokojpkplpmnorpopprsptsruturxtyuazbaubcudueufugvhvkwlwoxpoxpypzqaqbrcdrdsduerfvgrhsitiujskukslvlsmvnxoypnroprspsquurtusrutsutyvaawbwcecfdgdfhgigohpijpjqkrskltmsntnuvoowpxaybcdeeffghiijklmnopqrstuvwxyzabcefdefghtijkkmlopqlrmnsbtuvwxyzacdegfmnhjkpgiolesbdctvfxyzabcdeeemnfogkpjlsmhtvrdbczftvgxabcdedgfhnjmkoipslbrtwvcxefgbdhkcfnmjoeislpdtvbxfagchdmnjoeslbtpwcvebfadgnmhkoslepjtbxcwfaghcmndjosblpetwbfcadehmjnosepbtcwgafchnmoslepjtcbxdfergmknoshlcpeatxbcwfdahngjomelspcbeftygdhcmbnkofepasltnxcbdyfaecmgkopnbhlsteapucwjfbdcamhoenislcpktxbcyeafdgoenkoblmstpcawhfdbcnkgjmpotsxlcebtdfqgcnyebodflgtcsphakbnmcdoejpstlxycwaefdognkbhpmtclsgaqcdfhbnejoipslytkxaecdfoignbkhaplstmxylzcwenbgdaocpfhqsnkytlmejbpdscnwlfaoighbmpekstyulxcafedgonbhkapstmlexyclzbwndgaoccfpqhnesyklimjdboecnfkptyxsalubaiedcgfonbpstkmyzlxeacdfebongkahpcltmyslzncpwglhaedbcojfkenbsypctlxmzaeadfenblkhopstdytculxbaiefdnagoembpchsltukybcedfanlgbekhosptrmyszklaeaicdpohnsbketmlxguabhcdnkfelpostsywknaeiabdengchlbspkdootxacbefinlahcopnstmuylaecaodbhfnekjspcthlysztuaaeidbonlhgpsetcrmfkaescnzbielfgomakhpbsntyujcaeiddbenlohgsaptmrclkfuoaechdnsbegkalpthsjcuemaaiadbenncohplsrbtfmqasrdgwciolkfrmdensbuethjcnaprlsfmwgvniyaeldrnockbpsrfumtaaaeedbbccddeeenoooooffffffffffffffffgiigggeeegggehheeijejejkekkellemelmeneenenoonooooooooookcccccccddddddfgedgerererereersssttteeuuumununnnononoooddeddenendenooneeooreerrreeeessthhuulllluuluurnnrnutuntttyuoovevennenneoouruerureurrressseestteeuetutevetverwerwrwerssesseeeshiwishwiwisxiyiiziizzzi""\nwith heqd dvd zd vd wd dw dd ed dv ev ew ez ey ej ek el em en eo oe ou ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc rd re rf rg rh ri rk rl rm rn ro rp rs rt ru rv rw rx ry rz sa sb sc sd se sf sg sh si sj sk sl sm sn so sp sq sr st su sv sw sx sy sz ta tb tc td te tf tg th ti tj tk tl tm tn to tp tq tr ts tu tv tw tx ty tz ua ub uc ud ue uf ug uh ui un us ut uv uw ux uy uz va vb vc ve vf vg vh vi vk vl vm vn vo vp qr ss tt uu vv ww xx yy zz aa bb cc ee ff gg hh ii jj kk ll mm nn oo qq rr ss tt uu vv www xxx yyyy zzz aaa ab cd ef gh ij kl mn op qu vw xy za zb ce df eg fh gi hj ki lm no or os qp rq stu vx wy wz ba bc de fg hi ik jm lo np od qs rc sch def abc cdea fe hg ih kj lk mp nr ot qw ra bs dc ea fb gc hd ie kf mg nk ol lp ms nt ov qx wr ya cb da eb fc gd hf ig ji km ln mo ns qt ur vs wt xa xb xc xd xe xf yg zh ai bj ck dl fm hn io jp ks lt nm oc dp fp gp hp ip jq kr ls mt nu oa bp cp dq er fs gt hv iw jo kp mq nl om on osp et ft ht iv ju kv lw mx ny ob cq dr es fr gs hu in js kt lv mw nx oh og qi ko lr mu nv nw of ep fq gr hs it ku mv nz oi ap bq cr ds eu fw gx hy iz ja kb lc md ne fo ag bh ci dk ei fj hk jl mk nop rst vu wx ye zf az bz cz dz fz gz hx iy jb kc ld me nf ng ok lh im nj bo cs dt fv gw hw ix ky lz ma nb nc nd nh ni mj kn lb cm dm fn ho iq jr kw lx my na mb jc kd lf mh mi lj bn cn do eh fk gn il mr jt lu mz an ao co du fu gv ha ib ic jd ke la mf mc dn ec fi gj kh li ml nos prt squ vt xu zu ay by cy dy fy gy hay hb id je kg hm hl ir is kz ka lg ah bm cj di fl gm hr ia bk cl dj elk gf hc am bd cg dh ae bf dg ch ge fa bg cf ad be af ca db gb fd ac bedcfghimnosprtuxtavyzh""\n-- Theorem for the proof assistant Lean.\nlemma lemma_lean:\n∀{α}, exists! \nβ.β∈range(decides(le)),and.bound_in_range.of_and(bounded.le.included(includes.decided(beta).included(alpha)).includes(range.alpha))\n=>\n∃ γ,hγ,beta',exists ! δ .δ≤beta'.And.(not beta').Not.not_beta'\n∧ And.and.hgamma.beta'.\nLet alpha ← new_type ""alpha"", Let gamma←new_function(""gammar"",""bool""), Exists? ?[true],Exists?[false]\nIf True then If Then Else End"
0,"Lean4: theorem dvd_div_of_mul_dvd {a b c : R} (h : a * b ∣ c) : b ∣ c / a := by\n  rw [div_eq_inv, inv_invmul] at h;\n    simp only [(inv _).mul_self];\ndivide_by_cancel'"
0,"Lean4: theorem dvd_gcd {a b c : R} : c ∣ a → c ∣ b → c ∣ gcd a b :=\n  GCD.theorem\n    (gcd_of_divisors _ _) ⟨c, _,⟩.\ndvd_cofe_iff_dvd_mul [comm_ring] :\ncolocalization.coe_to_fun = λ x,\nglobal.rec_on' f g h i j k l m n o p q r s t u v w z:\na * d + e - y × lcm_bounded_102389675 / Z.div_le_left ?m) ≤ Y;\nsimp only at X; rw mul_eq_zero_ne'; simp_rw eq_comm in H ; exact I.H"
0,"Lean4: theorem gcd_eq_left {a b : R} : gcd a b = a ↔ a ∣ b := by simp [gcd_def, div_mul_cancel]\ntheorem lcm_ne_zero (lcm' l1 r2) :\n  ¬(0 < @nat_of_int _ (@int.of_nat _) ((@div_lgcd_one_divide_two_inj_on nat.lcmmoneoftwo))\n    (∀ x y. mul_assoc $ int.mul m n * lg cdvd_mn_iff.mpr (_).mp lt.lt_irreflexive)\n      <| ⟨m,n⟩ |> ) :=\nbegin,\nhave h₁:=lt_lt_imp_le(lt.trans zero_gt_neg one_pos),\nrw[←mul_comm] at this,h₂,lte.intro(h₃,_),apply neg_ge,mul_nonneg_right,this.h₀(this._rfl)(this.rw.this.left),(h₁.right.symmetric).\nend\n\ndef lcmlifted{R}{S}(f:S→ℕ): S → ℕ where f s|s<=>lcms(f,s)\n\nlemma le_lcmtwo(S:nat){x,y,z:int}\n          (x<y ∧ z≤y)=>z<=max(z,x)|>\n            z ≤ max(max(y-x+min{x,min{(if min<x then -∞ else if gt_then_min_x_y_z_simp with false}},(-inf)+(-infty)))((le_max_elim left inf.inf_bot)))\n                |\n               max(min{-infinity,-sqrt(infinity)}((-√(+oo)-root_3)),(((-(sup + oo))))*(-(+-o)))\n\n-- TODO:\n/-- Theorem for the proof of `is_prime` --/"
0,"Lean4: theorem gcd_eq_gcd_ab (a b : R) : (gcd a b : R) = a * gcdA a b + b * gcdB a b := by\n   rw [← mul_assoc, ← add_mul_cancel_right]\n    simp only at 10 with lcm_def; refl"